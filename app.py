# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z6GSMv9iWvZ2YkJRrfYrRSIIOAdINVzs
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import base64

# Page settings
st.set_page_config(page_title="🧠 Memory Forensics Predictor", layout="wide")
st.title("🧠 Memory Forensics Malware Detection")
st.markdown("Upload memory artifact feature data to detect **Malware** vs **Benign** using a trained ML model.")

# Load the trained model
@st.cache_resource
def load_model():
    return joblib.load("best_rf_model.pkl")  # Or best_svm_model.pkl

model = load_model()

# File upload
uploaded_file = st.file_uploader("📁 Upload a CSV file (feature data only)", type=["csv"])

if uploaded_file:
    try:
        data = pd.read_csv(uploaded_file)

        st.subheader("📊 Data Preview")
        st.dataframe(data.head())

        # Drop label columns if present
        data = data.drop(columns=[col for col in ['Category', 'Class'] if col in data.columns])

        # Ensure correct order and presence of feature columns
        try:
            data = data[model.feature_names_in_]
        except KeyError as e:
            st.error(f"❌ Missing required feature columns: {e}")
            st.stop()

        # Run predictions
        preds = model.predict(data)
        probs = model.predict_proba(data)[:, 1]

        # Build result DataFrame
        result_df = data.copy()
        result_df['Prediction'] = np.where(preds == 1, 'Malware', 'Benign')
        result_df['Confidence (%)'] = (probs * 100).round(2)

        st.success("✅ Prediction complete!")

        st.subheader("🧠 Prediction Results")
        st.dataframe(result_df)

        # Download CSV
        csv = result_df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="📥 Download Results as CSV",
            data=csv,
            file_name="memory_predictions.csv",
            mime="text/csv"
        )

        # Summary stats
        st.subheader("📈 Prediction Summary")
        malware_count = sum(result_df['Prediction'] == 'Malware')
        benign_count = sum(result_df['Prediction'] == 'Benign')
        st.metric("Malware Detected", malware_count)
        st.metric("Benign Samples", benign_count)

    except Exception as e:
        st.error(f"❌ An error occurred while processing the file: {e}")
else:
    st.info("👈 Please upload a CSV file to begin.")